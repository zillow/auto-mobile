stages:
  - test
  - build
  - publish

variables:
  LERNA_VERSION: "4.0.0"
  NODE_VERSION: "22"
  ARTIFACT_COMPRESSION_LEVEL: "fastest"
  CACHE_COMPRESSION_LEVEL: "fastest"
  FF_USE_FASTZIP: 1
  GIT_STRATEGY: "clone"
  GRADLE_VERSION: "8.10.2"
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

.aliases:
  - &reports_config_cache_path "android/build/reports/config-cache-report.html"
  - &android_sdk_image "zillow-docker.artifactory.zgtools.net/zillow/docker-images/android-sdk:latest"

.setup_gradle_env:
  - |
    echo "HOME is $HOME"
    echo "GRADLE_USER_HOME is at ${GRADLE_USER_HOME}"
    if [ ! -d "${GRADLE_USER_HOME}" ]; then
      echo "GRADLE_USER_HOME does not exist, creating it"
      mkdir -p "${GRADLE_USER_HOME}"
    else
      echo "It contains the following files and directories, should include some local build cache"
      ls -la ${GRADLE_USER_HOME} || true
    fi
    export GRADLE_PROJECT_HOME=`pwd`/.gradle
    BUNDLED_GRADLE_VERSION="${GRADLE_VERSION}"
    if [[ -f "gradle/wrapper/gradle-wrapper.properties" ]]; then
      export GRADLE_VERSION="$(grep "distributionUrl" gradle/wrapper/gradle-wrapper.properties | sed -E 's/.*gradle-([0-9.]+)-(all|bin).zip/\1/')"
      echo "GRADLE_VERSION in gradle/wrapper/gradle-wrapper.properties: $GRADLE_VERSION"
      if [[ -n "$BUNDLED_GRADLE_VERSION" ]] && [[ "${GRADLE_VERSION}" != "${BUNDLED_GRADLE_VERSION}" ]]; then
        echo "Warning: Bundled Gradle version in Docker image (${BUNDLED_GRADLE_VERSION}) does not match current gradle/wrapper/gradle-wrapper.properties (${GRADLE_VERSION})"
      elif [[ -z "$BUNDLED_GRADLE_VERSION" ]]; then
        echo "Missing any Gradle distribution in Docker image"
      fi
      mkdir -p $GRADLE_PROJECT_HOME/configuration-cache
      mkdir -p $GRADLE_PROJECT_HOME/$GRADLE_VERSION
    fi

.git_lfs_pull_safe:
  - |
    if ! command -v git-lfs &> /dev/null; then
      echo "git-lfs not installed, skipping git lfs pull"
    else
      git lfs pull
    fi

.npm_cache: &npm_cache
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
      - node_modules/
    policy: pull-push

.npm_cache_pull: &npm_cache_pull
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
      - node_modules/
    policy: pull

auto-mobile-node:
  image: node:${NODE_VERSION}
  tags:
    - mobplt-default
  <<: *npm_cache
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint
    - npm run build
    - npm run test
  artifacts:
    paths:
      - coverage/

auto-mobile-android-unit-tests:
  image: *android_sdk_image
  tags:
    - mobplt-android-rxl
  <<: *npm_cache
  before_script:
    - !reference [.setup_gradle_env]
    - git config core.hooksPath .githooks
    - !reference [.git_lfs_pull_safe]
    - npm ci --cache .npm --prefer-offline
    - npm run build
    - npm install -g
  script:
    - cd android
    - ./gradlew test
  artifacts:
    reports:
      junit: "**/build/test-results/**/TEST-*.xml"

# Publish stage
publish:
  image: node:${NODE_VERSION}
  tags:
    - mobplt-default
  <<: *npm_cache_pull
  before_script:
    - npm ci --cache .npm --prefer-offline
    - echo "//${ARTIFACTORY_URL}/api/npm/${NPM_REPO}/:_authToken=${ARTIFACTORY_API_KEY}" > .npmrc
  script:
    - npm run build
    - npx lerna@${LERNA_VERSION} publish --conventional-commits --conventional-graduate --yes --concurrency 1
  needs:
    - job: auto-mobile-node
    - job: auto-mobile-android-unit-tests
  when: manual
